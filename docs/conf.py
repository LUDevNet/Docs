#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# LU Documentation documentation build configuration file, created by
# sphinx-quickstart on Sun Aug 20 22:12:09 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os, re
from docutils import nodes, utils
from docutils.parsers.rst.roles import set_classes
from sphinx.domains import Domain
from kaitai import Kaitai
from sphinx.application import Sphinx 

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.todo',
              'sphinx.ext.githubpages', 'sphinxcontrib.plantuml']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'LU Documentation'
copyright = '2015-2021 humanoid & lcdr with contributions from Alanzote, Avery, jon002, Simon Nitzsche, Raine, Knightoffaith, pwjones, Xiphoseer and others â€“ CC-NC-SA 4.0'
author = 'humanoid & lcdr'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.0'
# The full version, including alpha/beta/rc tags.
release = '1.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', 'res']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for RTD ------------------------------------------------------

# on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

if not on_rtd:  # only import and set the theme if we're building docs locally
    import sphinx_rtd_theme
    html_theme = 'sphinx_rtd_theme'
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
else:
    html_theme = 'default'


explorer_base_url = 'https://explorer.lu/'
wiki_base_url = 'https://legouniverse.fandom.com/wiki/'
lu_packet_base_url = 'https://lcdruniverse.org/lu_packets/lu_packets/'

def wiki_role(role, rawtext, text, lineno, inliner, options={}, content=[]):
    ref = wiki_base_url + text
    set_classes(options)
    title = utils.unescape(text)
    node = nodes.reference(rawtext, title, refuri=ref, **options)
    return [node], []

packet_matcher = re.compile(r"(.*) <(.*)>")
# Takes a string like raknet/client/replica/character/struct.CharacterSerialization and returns CharacterSerialization with .findall
default_name_finder = re.compile(r"((?:[A-Z][^A-Z]*(?!\\))+$)")
# Takes a string like CharacterSerialization and returns ['Character', 'Serialization'] with .findall
default_name_splitter = re.compile(r"([A-Z][^A-Z]*)")

def lu_packet_role(role, rawtext, text, lineno, inliner, options={}, content=[]):
    m = packet_matcher.match(text)
    new_url = text
    new_title = text
    if m:
        new_url = m.group(2)
        new_title = m.group(1)
    else:
        name_split = re.findall(default_name_splitter, re.findall(default_name_finder, text)[0])
        new_title = " ".join(name_split)
    ref = lu_packet_base_url + '%s.html' % new_url
    set_classes(options)
    title = utils.unescape(new_title)
    node = nodes.reference(rawtext, title, refuri=ref, **options)
    return [node], []

def lu_gm_role(key):
    def role(role, rawtext, text, lineno, inliner, options={}, content=[]):
        ref = lu_packet_base_url + f'world/gm{key}/struct.{text}.html'
        set_classes(options)
        title = utils.unescape(text)
        node = nodes.reference(rawtext, title, refuri=ref, **options)
        return [node], []
    return role

def script_role(role, rawtext, text, lineno, inliner, options={}, content=[]):
    ref = explorer_base_url + 'scripts/' + text
    set_classes(options)
    title = utils.unescape(text)
    lit = nodes.literal(rawtext, title)
    node = nodes.reference('', 'Script ', lit, refuri=ref, **options)
    return [node], []

obj_match = re.compile(r"(.*) <([0-9]+)>")

def explorer_role(prefix, part_url):
    def role(role, rawtext, text, lineno, inliner,
                 options={}, content=[]):
        m = obj_match.match(text)
        if m:
            num = int(m.group(2))
            title = utils.unescape(m.group(1))
        else:
            try:
                num = int(text)
                title = prefix + utils.unescape(text)
                if num <= 0:
                    raise ValueError
            except ValueError:
                msg = inliner.reporter.error(
                    prefix + 'number must be a number greater than or equal to 1; '
                    '"%s" is invalid.' % text, line=lineno)
                prb = inliner.problematic(rawtext, rawtext, msg)
                return [prb], [msg]

        ref = explorer_base_url + part_url % num
        set_classes(options)
        node = nodes.reference(rawtext, title, refuri=ref, **options)
        return [node], []
    return role

behavior_role = explorer_role('Behavior ', 'skills/behaviors/%d')
skill_role = explorer_role('Skill ', 'skills/%d')
activity_role = explorer_role('Activity ', 'activities/%d')
object_role = explorer_role('Object ', 'objects/%d')
mission_role = explorer_role('Mission ', 'missions/%d')
zone_role = explorer_role('Zone ', 'zones/%d')

class GMDomain(Domain):
    label = 'Game Message'
    name = 'gm'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

def setup(app: Sphinx):
    app.add_directive('kaitai', Kaitai)
    app.add_role('behavior', behavior_role)
    app.add_role('skill', skill_role)
    app.add_role('mis', mission_role)
    app.add_role('lot', object_role)
    app.add_role('zone', zone_role)
    app.add_role('script', script_role)
    app.add_role('wiki', wiki_role)
    app.add_domain(GMDomain)
    app.add_role('gm', lu_gm_role(''))
    app.add_role_to_domain('gm', 'server', lu_gm_role('/server'))
    app.add_role_to_domain('gm', 'client', lu_gm_role('/client'))
    app.add_role('packet', lu_packet_role)
    app.add_css_file("css/packets.css")
    app.add_role('act', activity_role)

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}


# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
# html_sidebars = {
#    '**': [
#        'about.html',
#        'navigation.html',
#        'relations.html',  # needs 'show_related': True theme option to display
#        'searchbox.html',
#        'donate.html',
#    ]
# }


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'LUDocumentationdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'LUDocumentation.tex', 'LU Documentation Documentation',
     'humanoid & lcdr', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'ludocumentation', 'LU Documentation Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'LUDocumentation', 'LU Documentation Documentation',
     author, 'LUDocumentation', 'One line description of project.',
     'Miscellaneous'),
]
